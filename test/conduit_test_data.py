class useData(object):

    def inp_values(self, sub_dict: str):
        inp_dict = {"Pass": {'Username': 'user77',
                             'Email': 'user77@hotmail.com',
                             'Password': 'Userpass1', },
                    "Fail": {'Username': 'user1',
                             'Email': 'user1@hotmail.com',
                             'Password': '', },
                    "While": {'Username': 'user1',
                              'Email': 'user1@hotmail.com',
                              'Password': 'Userpass1', }
                    }
        return inp_dict[sub_dict]

    def expected_text(self, info: str):
        expected_str = {"Pass": {'Title': 'Welcome!',
                                 'Text': 'Your registration was successful!'},
                        "Fail": {'Title': 'Registration failed!',
                                 'Text': 'Password field required.'},
                        "While": {'Title': 'Registration failed!',
                                  'Text': 'Email already taken.'},
                        "Accept": {'Text': 'I accept!'},
                        "Update": {'Title': 'Update successful!'},
                        }
        return expected_str[info]

    def def_tag_list(self):
        predef_tags = (
            'lorem', 'ipsum', 'dolor', 'nisil', 'urna', 'nunc', 'laoreet', 'dorum', 'loret', 'nibih', 'mitast', 'leo')
        return predef_tags

    def new_article_dict(self):
        ### key=input placeholder; value=új cikk szövegelemei
        new_article = {"Article Title": "Create UmbEco-style text",
                       "What's this article about?": "How to generate text in Umberto Eco's style ",
                       "Write your article (in markdown)": "Now that the text-writing generated by AI is strengthened, it would be interesting to try to write a book in Umberto Eco's style,  with the help of an chat-AI",
                       "Enter tags": "Umberto, Eco, chat-AI",
                       }
        return new_article
